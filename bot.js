import { Telegraf, Markup } from "telegraf";
import fs from "fs";
import path from "path";
import XLSX from "xlsx";
import axios from "axios";
import {
  TELEGRAM_TOKEN,
  YANDEX_OAUTH_TOKEN,
  YANDEX_FOLDER_ID,
  EMPLOYEE_CHAT_ID,
} from "./config.js";

const REQUIRED_FIELDS = [
  "name",
  "phone",
  "productType", // –ø–µ—á–∞—Ç—å –∏–ª–∏ —à—Ç–∞–º–ø
  "usage", // –¥–ª—è –∫–æ–≥–æ
  "textOnStamp",
  "size",
  "language",
  "logo",
  "color",
  "osnastkaCategory",
  "osnastkaModel",
  "quantity",
  "urgency",
];

// –®–∞–±–ª–æ–Ω—ã –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –≤—ã–≤–æ–¥–∞ –∏—Ç–æ–≥–æ–≤:
const FIELD_LABELS = {
  name: "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
  phone: "–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞?",
  productType: "–ß—Ç–æ –Ω—É–∂–Ω–æ ‚Äî –ø–µ—á–∞—Ç—å –∏–ª–∏ —à—Ç–∞–º–ø?",
  usage: "–î–ª—è –∫–æ–≥–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è?",
  textOnStamp: "–ß—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–æ?",
  size: "–†–∞–∑–º–µ—Ä –∏–∑–¥–µ–ª–∏—è?",
  language: "–Ø–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞?",
  logo: "–î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ?",
  color: "–¶–≤–µ—Ç –æ—Ç—Ç–∏—Å–∫–∞?",
  osnastkaCategory: "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Å–Ω–∞—Å—Ç–∫–∏?",
  osnastkaModel: "–ú–æ–¥–µ–ª—å –æ—Å–Ω–∞—Å—Ç–∫–∏?",
  quantity: "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—É–∫?",
  urgency: "–°—Ä–æ—á–Ω–æ—Å—Ç—å, –¥–æ—Å—Ç–∞–≤–∫–∞, –ø–æ–∂–µ–ª–∞–Ω–∏—è?",
};

let iamToken = null;
let iamTokenExpire = 0;

async function getIamToken() {
  const url = "https://iam.api.cloud.yandex.net/iam/v1/tokens";
  const headers = { "Content-Type": "application/json" };
  const data = { yandexPassportOauthToken: YANDEX_OAUTH_TOKEN };

  const res = await axios.post(url, data, { headers });
  iamToken = res.data.iamToken;
  iamTokenExpire = Date.parse(res.data.expiresAt) - 60000;
  console.log("üîë –ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π IAM —Ç–æ–∫–µ–Ω");
}

async function ensureIamToken() {
  if (!iamToken || Date.now() > iamTokenExpire) {
    await getIamToken();
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ–∫—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ GPT –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª–µ–π (JSON) –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –Ω–∞–¥–æ
async function analyzeUserText(userText, knownData = {}) {
  await ensureIamToken();

  const url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion";
  const headers = {
    "Content-Type": "application/json",
    Authorization: `Bearer ${iamToken}`,
  };

  // –ü—Ä–æ–º–ø—Ç –¥–ª—è GPT ‚Äî –≤—ã–¥–µ–ª–∏—Ç—å –ø–æ–ª—è –∑–∞–∫–∞–∑–∞ –≤ JSON –∏ —É–∫–∞–∑–∞—Ç—å, —á–µ–≥–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –µ—Å–ª–∏ –Ω–∞–¥–æ
  const prompt = `
–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª –∑–∞–∫–∞–∑ –Ω–∞ –ø–µ—á–∞—Ç—å/—à—Ç–∞–º–ø:

"${userText}"

–ò–∑–≤–ª–µ–∫–∏ –∏–∑ —ç—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ JSON —Å —Ç–∞–∫–∏–º–∏ –ø–æ–ª—è–º–∏ (–µ—Å–ª–∏ –µ—Å—Ç—å):

- name: –∏–º—è –∑–∞–∫–∞–∑—á–∏–∫–∞
- phone: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
- productType: "–ø–µ—á–∞—Ç—å" –∏–ª–∏ "—à—Ç–∞–º–ø"
- usage: –¥–ª—è –∫–æ–≥–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ò–ü, –û–û–û)
- textOnStamp: —á—Ç–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–æ
- size: —Ä–∞–∑–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–∏–∞–º–µ—Ç—Ä 40–º–º)
- language: —è–∑—ã–∫ —Ç–µ–∫—Å—Ç–∞ (—Ä—É—Å—Å–∫–∏–π, –∞–Ω–≥–ª–∏–π—Å–∫–∏–π, –æ–±–∞)
- logo: –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–æ—Ç–∏–ø –∏–ª–∏ –Ω–µ—Ç (–¥–∞/–Ω–µ—Ç)
- color: —Ü–≤–µ—Ç –æ—Ç—Ç–∏—Å–∫–∞
- osnastkaCategory: –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ—Å–Ω–∞—Å—Ç–∫–∏ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è, —Ä—É—á–Ω–∞—è, –∫–∞—Ä–º–∞–Ω–Ω–∞—è)
- osnastkaModel: –º–æ–¥–µ–ª—å –æ—Å–Ω–∞—Å—Ç–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "–û—Ñ–∏—Å", "–¢—Ä–æ–¥–∞–Ω—Ç")
- quantity: –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —à—Ç—É–∫
- urgency: —Å—Ä–æ—á–Ω–æ—Å—Ç—å, –¥–æ—Å—Ç–∞–≤–∫–∞, –ø–æ–∂–µ–ª–∞–Ω–∏—è

–ï—Å–ª–∏ –∫–∞–∫–∏—Ö-—Ç–æ –ø–æ–ª–µ–π –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç, –¥–∞–π –∫–æ—Ä–æ—Ç–∫–∏–π —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —ç—Ç–∏ –¥–∞–Ω–Ω—ã–µ.

–û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å –¥–≤—É–º—è –ø–æ–ª—è–º–∏:
{
  "data": { ... }, // –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –ø–æ–ª—è
  "question": "..." // —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞, –µ—Å–ª–∏ –≤—Å—ë –µ—Å—Ç—å
}

–ü—Ä–∏–º–µ—Ä:

{
  "data": {
    "name": "–ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤",
    "phone": "+79991234567",
    "productType": "–ø–µ—á–∞—Ç—å"
  },
  "question": "–î–ª—è –∫–æ–≥–æ –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–µ—á–∞—Ç—å?"
}
`;

  const data = {
    modelUri: `gpt://${YANDEX_FOLDER_ID}/yandexgpt-lite`,
    completionOptions: {
      stream: false,
      temperature: 0,
      maxTokens: 500,
    },
    messages: [{ role: "user", text: prompt }],
  };

  const res = await axios.post(url, data, { headers });
  const raw = res.data.result.alternatives[0].message.text.trim();

  try {
    // –ü—Ä–æ–±—É–µ–º —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å JSON –∏–∑ –æ—Ç–≤–µ—Ç–∞ GPT
    const jsonStart = raw.indexOf("{");
    const jsonEnd = raw.lastIndexOf("}") + 1;
    const jsonString = raw.substring(jsonStart, jsonEnd);
    const parsed = JSON.parse(jsonString);
    return parsed;
  } catch (e) {
    console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç GPT:", e);
    return {
      data: {},
      question: "–ù–µ —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å –≤–∞—à –∑–∞–∫–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø–æ–¥—Ä–æ–±–Ω–µ–µ.",
    };
  }
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ Excel
function saveToExcel(answers) {
  const filePath = "./orders.xlsx";
  let data = [];

  if (fs.existsSync(filePath)) {
    const workbook = XLSX.readFile(filePath);
    const worksheet = workbook.Sheets[workbook.SheetNames[0]];
    data = XLSX.utils.sheet_to_json(worksheet, { header: 1 });
  } else {
    data.push(Object.values(FIELD_LABELS));
  }

  const row = REQUIRED_FIELDS.map((f) => answers[f] || "");
  data.push(row);

  const worksheet = XLSX.utils.aoa_to_sheet(data);
  const workbook = XLSX.utils.book_new();
  XLSX.utils.book_append_sheet(workbook, worksheet, "–ó–∞–∫–∞–∑—ã");
  XLSX.writeFile(workbook, filePath);

  return filePath;
}

const bot = new Telegraf(TELEGRAM_TOKEN);
const sessions = new Map();

bot.start((ctx) => {
  sessions.set(ctx.chat.id, {
    data: {}, // –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    awaitingQuestion: "", // –≤–æ–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –∑–∞–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  });
  ctx.reply(
    "–ü—Ä–∏–≤–µ—Ç! –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —á—Ç–æ –∏–º–µ–Ω–Ω–æ –≤–∞–º –Ω—É–∂–Ω–æ –¥–ª—è –∑–∞–∫–∞–∑–∞ –ø–µ—á–∞—Ç–∏ –∏–ª–∏ —à—Ç–∞–º–ø–∞. –ú–æ–∂–Ω–æ –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ."
  );
});

bot.on("message", async (ctx) => {
  const session = sessions.get(ctx.chat.id);
  if (!session) {
    return ctx.reply("–í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.");
  }

  const userText = ctx.message.text.trim();

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–µ—Å—å —Å–æ–±—Ä–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç + —Ç–µ–∫—É—â–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ —É—Ç–æ—á–Ω—è—é—â–∏–π –≤–æ–ø—Ä–æ—Å (–µ—Å–ª–∏ –±—ã–ª)
  let textForGPT = userText;
  if (session.awaitingQuestion) {
    textForGPT = session.awaitingQuestion + " " + userText;
  }

  const { data, question } = await analyzeUserText(textForGPT, session.data);

  // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Å–µ—Å—Å–∏–∏
  session.data = { ...session.data, ...data };

  if (question && question.length > 0) {
    session.awaitingQuestion = question;
    return ctx.reply(question);
  } else {
    // –í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ–±—Ä–∞–Ω—ã ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º

    let summary = "–í–æ—Ç —á—Ç–æ –≤—ã —É–∫–∞–∑–∞–ª–∏:\n\n";
    for (const field of REQUIRED_FIELDS) {
      if (session.data[field]) {
        summary += `${FIELD_LABELS[field]} ${session.data[field]}\n`;
      }
    }

    ctx.reply(summary);
    saveToExcel(session.data);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫—É –∫—Ä–∞—Ç–∫–∏–π –∑–∞–∫–∞–∑
    let shortSummary = "–ù–æ–≤—ã–π –∑–∞–∫–∞–∑:\n";
    for (const field of REQUIRED_FIELDS) {
      if (session.data[field]) {
        shortSummary += `${FIELD_LABELS[field]} ${session.data[field]} | `;
      }
    }
    shortSummary = shortSummary.slice(0, -3);

    await ctx.telegram.sendMessage(EMPLOYEE_CHAT_ID, shortSummary);

    // –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–µ—Å—Å–∏—é
    sessions.delete(ctx.chat.id);
  }
});

bot.launch();
console.log("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!");
